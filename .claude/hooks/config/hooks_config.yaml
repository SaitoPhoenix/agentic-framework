# Claude Code Hooks Configuration
#
# For complete documentation, see README.md in this directory
#
# Quick Reference:
# - Available hooks: stop, notification, subagent_stop, user_prompt_submit,
#   pre_tool_use, post_tool_use, pre_compact, session_start, session_end
# - Available tasks: log_hook, tts_notification, conversation_capture, cleanup_subprocesses, security_guard
# - Docs: https://docs.claude.com/en/docs/claude-code/hooks

# ============================================================================
# HOOK CONFIGURATIONS
# ============================================================================

# Stop Hook - Runs when Claude Code finishes responding
stop:
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "stop"
  tts_notification:
    enabled: true
    module: "tts_notification.main"
    function: "announce_tts"
    config:
      tts:
        provider: "elevenlabs"
        voice: "fUjY9K2nAIwlALOwSiwc"
        model: "eleven_turbo_v2_5"
      message_pattern: "pregenerated_completion_messages.j2"
      choose_random: true
      user_name: "Saito"

# Notification Hook - Runs when Claude sends notifications
notification:
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "notification"
  tts_notification:
    enabled: true
    module: "tts_notification.main"
    function: "announce_tts"
    config:
      tts:
        provider: "elevenlabs"
        voice: "fUjY9K2nAIwlALOwSiwc"
        model: "eleven_turbo_v2_5"
      message_pattern: "pregenerated_notification_messages.j2"
      choose_random: true
      user_name: "Saito"      

# SubagentStop Hook - Runs when subagent tasks complete
subagent_stop:
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "subagent_stop"

# UserPromptSubmit Hook - Runs when user submits a prompt
user_prompt_submit:
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "user_prompt_submit"

# PreToolUse Hook - Runs before tool calls
pre_tool_use:
  security_guard:
    enabled: true
    module: "security_guard.main"
    function: "check_security"
    config:
      rules_file: ".claude/hooks/config/security-rules.yaml"
      validate_only: false
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "pre_tool_use"

# PostToolUse Hook - Runs after tool calls complete
post_tool_use:
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "post_tool_use"

# PreCompact Hook - Runs before context compaction
pre_compact:
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "pre_compact"

# SessionStart Hook - Runs when session starts/resumes
session_start:
  security_guard_validator:
    enabled: true
    module: "security_guard.main"
    function: "check_security"
    config:
      rules_file: ".claude/hooks/config/security-rules.yaml"
      validate_only: true
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "session_start"
  conversation_capture:
    enabled: true
    module: "conversation_capture.main"
    function: "start_conversation_capture"
    config:
      pid_file_name: "conversation_watchdog.pid"
      episodic_path: ".claude/agent-docs/memory/episodic"
      human_name: "Saito"
      agent_name: "Yuki"

# SessionEnd Hook - Runs when session ends
session_end:
  log_hook:
    enabled: true
    module: "log_hook.main"
    function: "log_hook_data"
    config:
      hook_name: "session_end"
  cleanup_subprocesses:
    enabled: true
    module: "cleanup_subprocesses.main"
    function: "cleanup_subprocesses"
    config:

# ============================================================================
# GLOBAL SETTINGS
# ============================================================================

global:
  log_directory: "logs"
  subprocess_timeout: 10
  verbose_logging: false
  show_errors: true
