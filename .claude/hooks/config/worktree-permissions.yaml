# Claude Code Worktree Permissions Configuration
# This file defines tool permissions for worktree environments
#
# Permission levels:
#   - Allow: Tool is permitted without confirmation
#   - Ask: Tool requires user confirmation
#   - Deny: Tool is blocked completely
#
# Tool naming follows Claude Code format (see .claude/ref_docs/anthropic_tools.md):
#   - "Bash": All bash commands
#   - "Bash(git status:*)": Specific bash command patterns
#   - "Read", "Write", "Edit", "MultiEdit": File operations
#   - "WebFetch", "WebSearch": Web operations
#   - "Glob", "Grep": Search operations
#   - "Task", "SlashCommand": Agent operations

# ============================================================================
# GLOBAL SETTINGS
# ============================================================================

global:
  # Enable/disable worktree permissions entirely
  enabled: true

  # Default permission for tools not explicitly specified
  default_permission: Ask

  # Log permission decisions for debugging
  log_permissions: true

  # Enforce path boundaries - deny operations outside worktree
  enforce_boundaries: true

  # Tools that are ALWAYS allowed in any worktree (read-only operations)
  always_allow:
    - "Read"                      # Read any file (including outside worktree)
    - "Grep"                      # Search file contents
    - "Glob"                      # Find files by pattern
    - "Task"                      # Sub-agents
    - "TodoWrite"                 # Task management
    - "Bash(git status:*)"        # Git status
    - "Bash(git log:*)"           # Git history
    - "Bash(git diff:*)"          # Git diffs
    - "Bash(git show:*)"          # Show commits
    - "Bash(git branch:*)"        # List branches
    - "Bash(git worktree:*)"      # Worktree commands
    - "Bash(git rev-parse:*)"     # Git inspection
    - "Bash(pwd:*)"               # Print working directory
    - "Bash(ls:*)"                # List files
    - "Bash(find:*)"              # Find files
    - "Bash(mkdir:*)"             # Create directories
    - "Bash(grep:*)"              # Search text
    - "Bash(eza:*)"                # List files
    - "Bash(npm:*)"                # Node package manager
    - "Bash(uv:*)"                # Python package manager


  # Tools that are ALWAYS denied in worktrees (security)
  always_deny:
    - pattern: "Bash(sudo:*)"
      reason: "Tool denied by always_deny rule"
    - pattern: "Bash(su:*)"
      reason: "Switch user commands not allowed"
    - pattern: "Bash(dd:*)"
      reason: "dd command is dangerous"
            

# ============================================================================
# SPECIAL: cd COMMAND HANDLING
# ============================================================================
# The cd (change directory) command is handled specially:
#   - ALWAYS allowed within worktree boundaries
#   - ALWAYS denied when attempting to exit worktree boundaries
#   - This enforcement happens regardless of branch type or permissions
#
# Users should understand:
#   - You can freely navigate within your worktree
#   - Attempting to cd outside the worktree will be blocked with a message
#   - This is to maintain isolation and prevent accidental cross-worktree operations

# ============================================================================
# MAIN WORKING TREE PERMISSIONS
# ============================================================================
# Optional: Apply permissions to the main working tree (not a linked worktree)
# If enabled=false, main working tree uses default Claude Code permissions

main_worktree:
  enabled: false  # Set to true to override default Claude Code permissions
  permissions:
    "Write": Ask
    "Edit": Ask
    "MultiEdit": Ask
    "Bash(git push:*)": Ask
    "WebFetch": Ask

# ============================================================================
# LINKED WORKTREE PERMISSIONS BY BRANCH TYPE
# ============================================================================
# Permissions are based on branch type extracted from branch name pattern: TYPE/name
# Examples: feat/new-feature, fix/bug-123, docs/update-readme
#
# Branch types follow GitHub Flow conventions:
#   - feat: New features
#   - fix: Bug fixes
#   - hotfix: Urgent production fixes
#   - refactor: Code refactoring
#   - perf: Performance improvements
#   - test: Testing code
#   - docs: Documentation changes
#   - chore: Non-code changes (build, CI, etc.)
#   - build: Build system changes
#   - ci: CI/CD pipeline changes
#   - security: Security-related changes
#   - exp: Experimental branches

branch_permissions:

  # Feature development branches: feat/*
  - branch_types: [feat]
    reason: "Worktree Permissions: Feature branch allows collaborative development with safeguards"
    permissions:
      "Write": Allow
      "Edit": Allow
      "MultiEdit": Allow
      "Bash(git add:*)": Allow
      "Bash(git commit:*)": Allow
      "Bash(git push:*)": Ask    # Confirm before pushing
      "Bash(gh pr:*)": Allow     # GitHub PR commands
      "WebFetch": Ask
      "WebSearch": Ask

  # Bug fixes and hotfixes: fix/*, hotfix/*
  - branch_types: [fix, hotfix]
    reason: "Worktree Permissions: Bug fix branch focused on resolving issues without external dependencies"
    permissions:
      "Read": Allow
      "Write": Allow
      "Edit": Allow
      "MultiEdit": Allow
      "Bash(git add:*)": Allow
      "Bash(git commit:*)": Allow
      "Bash(git push:*)": Ask
      "Bash(gh pr:*)": Allow
      "WebFetch": Deny           # No external fetches for fixes

  # Refactoring branches: refactor/*, Performance optimization branches: perf/*
  - branch_types: [refactor, perf]
    reason: "Worktree Permissions: Refactoring and performance branches require careful code changes"
    permissions:
      "Write": Allow
      "Edit": Allow
      "MultiEdit": Allow
      "Bash(git add:*)": Allow
      "Bash(git commit:*)": Allow
      "Bash(git push:*)": Ask
      "Bash(gh pr:*)": Ask
      "WebFetch": Deny

  # Testing branches: test/*
  - branch_types: [test]
    reason: "Worktree Permissions: Testing branch restricted to running tests, not making code changes"
    permissions:
      "Write": Ask               # Careful with test file changes
      "Edit": Ask
      "MultiEdit": Deny
      "Bash(git add:*)": Deny    # Usually don't commit from test branches
      "Bash(git commit:*)": Deny
      "WebFetch": Deny

  # Chore/maintenance branches: chore/*, Documentation branches: docs/*
  - branch_types: [chore, docs]
    reason: "Worktree Permissions: Maintenance and documentation branches allow non-code changes"
    permissions:
      "Write": Allow
      "Edit": Allow
      "MultiEdit": Allow
      "Bash(git add:*)": Allow
      "Bash(git commit:*)": Allow
      "Bash(git push:*)": Ask
      "Bash(gh pr:*)": Ask
      "WebFetch": Ask            # May need to verify external links
      "WebSearch": Ask

  # Build system changes: build/*, CI/CD pipeline changes: ci/*
  - branch_types: [build, ci]
    reason: "Worktree Permissions: Build and CI/CD branches modify infrastructure configuration"
    permissions:
      "Write": Allow
      "Edit": Allow
      "MultiEdit": Ask
      "Bash(git add:*)": Allow
      "Bash(git commit:*)": Allow
      "Bash(git push:*)": Ask
      "WebFetch": Ask            # May need to fetch build configs

  # Security-related changes: security/*
  - branch_types: [security]
    reason: "Worktree Permissions: Security branch requires extra caution with all changes"
    permissions:
      "Write": Ask               # Extra careful with security changes
      "Edit": Ask
      "MultiEdit": Ask
      "Bash(git add:*)": Allow
      "Bash(git commit:*)": Allow
      "Bash(git push:*)": Ask
      "Bash(gh pr:*)": Ask
      "WebFetch": Deny           # No external fetches in security branches
      "WebSearch": Deny

  # Experimental branches: exp/*
  - branch_types: [exp]
    reason: "Worktree Permissions: Experimental branch allows unrestricted exploration and testing"
    permissions:
      "Write": Allow
      "Edit": Allow
      "MultiEdit": Allow
      "Bash(git add:*)": Allow
      "Bash(git commit:*)": Allow
      "Bash(git push:*)": Allow  # More permissive
      "WebFetch": Allow          # Experiments may need external data
      "WebSearch": Allow

# ============================================================================
# FALLBACK FOR UNKNOWN BRANCH TYPES
# ============================================================================
# Applied when branch name doesn't match TYPE/name pattern
# or when branch type is not recognized

unknown_branch:
  reason: "Worktree Permissions: Unknown or unrecognized branch type, applying conservative permissions"
  permissions:
    "Read": Allow
    "Write": Ask
    "Edit": Ask
    "MultiEdit": Ask
    "Bash(git add:*)": Ask
    "Bash(git commit:*)": Ask
    "Bash(git push:*)": Deny
    "WebFetch": Deny
    "WebSearch": Deny
